/*
 * TS  - Typescript
 * GQL - GraphQL
 *  R  - React
 * RX  - Redux
 *  J  - Jest
*/

{
  /* # TS React breakdown
  *    ts - typescript
  *  r|rr - react
  * c|f|s - class | function | stateless (const)
  *   ful - adds state
  */

  // ## React Components
  "React Component": {
    "prefix": "ReactComponent",
    "description": "Create a React Component with typescript.",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IProps {",
      "}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.Component<IProps, any> {",
      "  render() {",
      "    return <div>",
      "      ${2:}",
      "    </div>",
      "  }",
      "}",
      ""
    ],
  },
  "React Component - Full": {
    "prefix": "ReactFullComponent",
    "description": "Create a stateful React Component.",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IProps {",
      "\tlabel: string,",
      "}",
      "",
      "interface IState {",
      "}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.Component<IProps, IState> {",
      "\tstatic defaultProps = {",
      "\t\tlabel: 'text',",
      "\t}",
      "",
      "\tconstructor(props: IProps) {",
      "\t\tsuper(props)",
      "",
      "\t\tthis.state = {}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn <div>",
      "\t\t  ${2:}",
      "\t\t</div>",
      "\t}",
      "}",
      ""
    ],
  },
  "React Component - Full w/ Style": {
    "prefix": "ReactStyledComponent",
    "description": "Create a stateful React Component.",
    "body": [
      "import * as React from 'react'",
      "import * as S from './${1:${TM_FILENAME_BASE}}.scss'",
      "",
      "interface IProps {",
      "\tlabel: string,",
      "}",
      "",
      "interface IState {",
      "}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.Component<IProps, IState> {",
      "\tstatic defaultProps = {",
      "\t\tlabel: 'text',",
      "\t}",
      "",
      "\tconstructor(props: IProps) {",
      "\t\tsuper(props)",
      "",
      "\t\tthis.state = {}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn <div>",
      "\t\t  ${2:}",
      "\t\t</div>",
      "\t}",
      "}",
      ""
    ],
  },
  "React Component - Pure": {
    "prefix": "ReactPureComponent",
    "description": "Create a React PureComponent.",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IProps {",
      "}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.PureComponent<IProps, any> {",
      "  render() {",
      "    return <div>",
      "      ${2:}",
      "    </div>",
      "  }",
      "}",
      ""
    ],
  },
  "React Function - Pure": {
    "prefix": "ReactPureFunction",
    "description": "Create a React Pure Function Component.",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IProps {",
      "}",
      "",
      "export function ${1:${TM_FILENAME_BASE}} (props: IProps): React.PureComponent {",
      "    return  <div>",
      "      ${0}",
      "    </div>",
      "}",
      ""
    ],
  },
  "React Stateless Function Component": {
    "prefix": "ReactFunctionComponent",
    "description": "Create a React Stateless Functional Component.",
    "body": [
      "import * as React from 'react'",
      "",
      "interface IProps {",
      "}",
      "",
      "const $1: React.SFC<IProps> = (props: IProps) => {",
      "  return $0",
      "}",
      "",
      "export default $1"
    ],
  },

  // ## React Class Methods
  "constructor": {
    "prefix": "construct(props",
    "description": "Add a constructor in class.",
    "body": [
      "constructor(props: ${1:IProps}) {",
      "\tsuper(props)",
      "",
      "\t${2:}",
      "}"
    ],
  },
  "constructorWithState": {
    "prefix": "constructState",
    "description": "Add a constructor in class.",
    "body": [
      "\tconstructor(props: IProps) {",
      "\t\tsuper(props)",
      "",
      "\t\tthis.state = {}",
      "\t}",
      "",
    ]
  },
  "componentWillMount": {
    "prefix": "componentWillMount",
    "description": "Invoked immediately before mounting occurs. It is called before render().",
    "body": [
      "componentWillMount() {",
      "  ${1:${TM_FILENAME_BASE}}",
      "}"
    ],
  },
  "render": {
    "prefix": "render",
    "description": "When called, it should examine this.props and this.state and return a single React element.",
    "body": [
      "render() {",
      "  return <div className={[S.${2:class}].join(''}>",
      "    ${1:res}",
      "  </div>",
      "}",
    ],
  },
  "componentDidMount": {
    "prefix": "componentDidMount",
    "description": "Invoked immediately after a component is mounted.",
    "body": [
      "componentDidMount() {",
      "  ${1:${TM_FILENAME_BASE}}",
      "}",
    ],
  },
  "componentWillReceiveProps": {
    "prefix": "componentWillReceiveProps",
    "description": "Invoked before a mounted component receives new props.",
    "body": [
      "componentWillReceiveProps(np: ${1:${IProps}}) {",
      "  ${2:}",
      "}",
    ],
  },
  "shouldComponentUpdate": {
    "prefix": "shouldComponentUpdate",
    "description": "Invoked before rendering when new props or state are being received.",
    "body": [
      "shouldComponentUpdate(np: I${1:}Props, ns: I${1:}State) {",
      "\tconst cp = this.props",
      "\t${2:}",
      "\treturn !deepEqual(cp, np)",
      "}",
      "",
    ],
  },
  "componentWillUpdate": {
    "prefix": "componentWillUpdate",
    "description": "Invoked immediately before rendering when new props or state are being received.",
    "body": [
      "componentWillUpdate(nextProps: ${1:IProps}, nextState) {",
      "\tconst cp = this.props",
      "\tconst cs = this.state",
      "\t${2:}",
      "}"
    ],
  },
  "componentDidUpdate": {
    "prefix": "componentDidUpdate",
    "description": "Invoked immediately after updating occurs. This method is not called for the initial render",
    "body": [
      "componentDidUpdate(prevProps: ${1:IProps}, prevState) {",
      "\tconst cp = this.props",
      "\tconst cs = this.state",
      "\t${2:}",
      "}"
    ],
  },
  "componentWillUnmount": {
    "prefix": "componentWillUnmount",
    "description": "Invoked immediately before a component is unmounted and destroyed",
    "body": [
      "componentWillUnmount() {",
      "  ${1:}",
      "}"
    ],
  },
  "componentSetState": {
    "description": "Performs a shallow merge of nextState into current state",
    "prefix": "this.setState",
    "body": [
      "this.setState(${1:})"
    ],
  },
  "getDerivedStateFromProps": {
    "prefix": "getDerivedStateFromProps",
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates",
    "body": [
      "static getDerivedStateFromProps(nextProps: ${1:any}, prevState: ${2:any}) {",
      "  ${0}",
      "}"
    ],
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "getSnapshotBeforeUpdate",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM",
    "body": [
      "getSnapshotBeforeUpdate(prevProps: ${1:any}, prevState: ${2:any}) {",
      "  ${0}",
      "}"
    ],
  },

  // # React Helpers
  "createContext": {
    "prefix": "createContext",
    "body": [
      "export const {",
      "\tProvider: ${1:${TM_FILENAME_BASE}}Provider,",
      "\tConsumer: ${1:${TM_FILENAME_BASE}}Consumer,",
      "} = React.createContext({",
      "\tid: sid(),",
      "\tpage: 0,",
      "})",
    ],
  },
  "createRef": {
    "prefix": "createRef",
    "body": ["this.${1:refName}Ref = React.createRef()", ""],
    "description": "Create ref statement used inside constructor"
  },
  "forwardRef": {
    "prefix": "forwardRef",
    "body": ["const ref = React.createRef()", ""],
    "description": "Forward ref statement used inside component"
  },

  // # Higher Order Components
  // TODO: update for TS
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  return hocComponent",
      "}",
      ""
    ]
  },
}